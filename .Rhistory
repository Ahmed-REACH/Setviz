stat='identity',
width=0.1,position="dodge")
ggplot(summary.statistic,aes(x=independent.var.value,y=numbers,fill=dependent.var.value))+geom_bar(stat = "identity")+theme_tufte()+
xlab(unique(summary.statistic$independent.var)[1])+ylab("percent")+
theme(text=element_text(family="Arial Narrow")
# axis.title.x=element_text(summary.statistic$dependent.var.value"),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
# axis.text.y=element_blank(),
# axis.ticks.y=element_blank(),
# plot.margin = unit(x = c(0,0,0,0),'null')
)+
# scale_fill_reach(name=unique(summary.statistic$dependent.var)[1])+
geom_errorbar( aes(x=summary.statistic$independent.var.value,
ymin=as.numeric(summary.statistic$min),
ymax=as.numeric(summary.statistic$max)),
stat='identity',
width=0.1)
plot(summary.statistic$numbers,summary.statistic$max)
plot(summary.statistic$numbers,summary.statistic$max,xlim=c(0,1),ylim=c(0,1))
plot(summary.statistic$numbers,summary.statistic$max,xlim=c(0,1),ylim=c(0,1))
abline(c(0,1))
summary.statistic$max-summary.statistic$numbers
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
# RESHAPE OUTPUTS FOR MASTER TABLE:
# extract summary statistics from result list and rbind to a single long format table
debug(percent_with_confints)
all_summary_statistics <- results %>% lapply(function(x){x$summary.statistic}) %>% do.call(rbind,.)
debug(percent_with_confints)
results<-apply_data_analysis_plan(data,analysis_plan_direct_reporting)
confints
confints
confints
data.frame(ftable_flipped,confints)
data.frame(ftable_flipped,confints) %>% head
f.table <- svytable(formula(formula_summary), design)
p.table <- apply(f.table,1,function(x){x/sum(x)})
p.table
table(design$variables[[dependent.var]],design$variables[[independent.var]])
f.table
f.table <- svytable(formula(formula_summary), design) %>% t
f.table
table(design$variables[[dependent.var]],design$variables[[independent.var]])
ftable_flipped
results
data.frame(rownames(ftable_flipped))
(ftable_flipped)
confints
data.frame(rownames(confints),ftable_flipped)
confints<-tryCatch(
?svybz
{confints <- svyby(formula(formula_string), formula(by), design, svymean, na.rm = T, keep.var = T,) %>% confint(level = 0.95)
confints[,1] %>% replace(confints[,1] < 0 , 0)
confints[,2] %>% replace(confints[,2] > 1 , 1)
confints}
,error=function(cond){sink("./internal/issues_log.txt")
cat("\nconfints failed:\n")
cat(paste("dependent.var:",dependent.var,"\nindependent.var:",independent.var)
)
cat("\n")
print(cond)
sink()
return(data.frame(min=NA,max=NA))
})
?svyby
confints <- svyby(formula(formula_string), formula(by), design, svymean, na.rm = T, keep.var = T,vartype = "ci")
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../")
# clear/create folders
unlink("./output/modified_data/",recursive=TRUE)
unlink("./output/percent_aggregations_raw_csv",recursive=TRUE)
dir.create("./output",showWarnings = F)
dir.create("./output/modified_data",showWarnings = F)
dir.create("./output/percent_aggregations_raw_csv",showWarnings = F)
dir.create("./output/mean_aggregations_raw_csv",showWarnings = F)
#load dependencies
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# debug(sanitise_data)
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_weighted_counts<-load_composite_indicator_definition_weighted_count()
data<-add_variable_indicators_weighted_count(data,composite_indicators_weighted_counts)
data %>% map_to_file("./output/modified_data/data_with_composite_indicators.csv")
if(data_parameters$stratified=="yes"){sf<-load_samplingframe("./internal/input_files/sampling_frame.csv",
data.stratum.column = data_parameters$stratum.name.variable,return.stratum.populations = F
)}
# load kobo tool:
questionnaire<-load_questionnaire(data,questions.file = "./internal/input_files/kobo_questions.csv",
choices.file = "./internal/input_files/kobo_choices.csv",
choices.label.column.to.use = data_parameters$choices.label.column.to.use)
# aggregating all variables (direct reporting)
# list of variables to disaggregate by:
analysis_definition_aggregations<-read.csv("./internal/input_files/aggregate all variables.csv",stringsAsFactors = F)
# create a data analysis plan with all disaggregation variables as independent variable for all variables as dependent
analysis_plan_direct_reporting<-map_to_analysis_plan_all_vars_as_dependent("marital_status",data)
# APPLY ANALYSIS PLAN:
# analyse_indicator(data,dependent.var = "deviceid",independent.var= "marital_status",hypothesis.type = "direct_reporting",sampling.strategy.stratified = TRUE,case = "CASE_direct_reporting_numerical_categorical")
data<-missing_data_to_NA(data)
debug(percent_with_confints)
results<-apply_data_analysis_plan(data,analysis_plan_direct_reporting)
confints <- svyby(formula(formula_string), formula(by), design, svymean, na.rm = T, keep.var = T,vartype = "ci")
confints
confints
confints[,1]
confints[,2]
colnames(confints)
results
confints
results
confints
confints %>% melt
data.frame(confints %>% melt,ftable_flipped)
confints %>% melt
confints
confints
confints %>% gather
paste0("ci_u.",independent.var)
ls()
confints
names(confints)
design$variables[[independent.var]]
design$variables[[independent.var]] %>% unique
paste0(independent.var,design$variables[[independent.var]] %>% unique)
unique.independent.var.values<-paste0(independent.var,design$variables[[independent.var]] %>% unique)
unique.independent.var.values
unique.independent.var.values %>% lapply(function(x){confints[,c(x,paste0("ci_l."x),paste0("ci_u."x))]})
unique.independent.var.values %>% lapply(function(x){confints[,c(x,paste0("ci_l."x),paste0("ci_u.",x))]})
unique.independent.var.values %>% lapply(function(x){confints[,c(x,paste0("ci_l.",x),paste0("ci_u.",x))]})
unique.independent.var.values %>% lapply(function(x){confints[,c(x,paste0("ci_l.",x),paste0("ci_u.",x))]}) %>% do.call(rbind,.)
unique.independent.var.values %>% sapply(function(x){confints[,c(x,paste0("ci_l.",x),paste0("ci_u.",x))]})
unique.independent.var.values<-paste0(independent.var,design$variables[[independent.var]] %>% unique)
unique.independent.var.values
summary_with_confints<-unique.independent.var.values %>% lapply(function(x){confints[,c(x,paste0("ci_l.",x),paste0("ci_u.",x))]}) %>% lapply(function(x){ colnames(x)<-c("","numbers","min","max")}) %>% do.call(rbind)
confints
unique.independent.var.values<-paste0(independent.var,design$variables[[independent.var]] %>% unique)
summary_with_confints<-unique.independent.var.values %>% lapply(function(x){confints[,c(dependent.var,x,paste0("ci_l.",x),paste0("ci_u.",x))]}) %>% lapply(function(x){ colnames(x)<-c("dependent.var.value","numbers","min","max")}) %>% do.call(rbind)
summary_with_confints<-unique.independent.var.values %>% lapply(function(x){confints[,c(dependent.var,x,paste0("ci_l.",x),paste0("ci_u.",x))]}) %>% lapply(function(x){ colnames(x)<-c("dependent.var.value","numbers","min","max")}) %>% do.call(rbind,.)
summary_with_confints
summary_with_confints<-unique.independent.var.values %>% lapply(function(x){confints[,c(dependent.var,x,paste0("ci_l.",x),paste0("ci_u.",x))]})
summary_with_confints
unique.independent.var.values
unique.independent.var.values %>% lapply(function(x){confints[,c(dependent.var,x,paste0("ci_l.",x)
,paste0("ci_u.",x))]})
unique.independent.var.values %>% lapply(function(x){confints[,c(dependent.var,x,paste0("ci_l.",x),paste0("ci_u.",x))]})
summary_with_confints<-unique.independent.var.values %>% lapply(function(x){confints[,c(dependent.var,x,paste0("ci_l.",x),paste0("ci_u.",x))]}) %>% lapply(function(x){ colnames(x)<-c("dependent.var.value","numbers","min","max");x}) %>% do.call(rbind,.)
summary_with_confints
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
independent_value_x_stats<-confints[,c(dependent.var,x,paste0("ci_l.",x),paste0("ci_u.",x))]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(independent.var.value=x,independent_value_x_stats)
}) %>% do.call(rbind,.)
summary_with_confints
dependent.var
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
independent_value_x_stats<-confints[,c(dependent.var=dependent.var,numbers=summary_stat_colname,se=NA,min=lower_confint_colname,max=upper_confint_colname)]
# colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
}) %>% do.call(rbind,.)
confints
confints<-tryCatch(
{confints <- svyby(formula(formula_string), formula(by), design, svymean, na.rm = T, keep.var = T,vartype = "ci") # %>% confint(level = 0.95)
unique.independent.var.values<- design$variables[[independent.var]] %>% unique
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
print(summary_stat_colname)
print(upper_confint_colname)
print(lower_confint_colname)
print()
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,independent.var=independent.var,independent.var.value=x,independent_value_x_stats)
}) %>% do.call(rbind,.)
})
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
print(summary_stat_colname)
print(upper_confint_colname)
print(lower_confint_colname)
print()
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,independent.var=independent.var,independent.var.value=x,independent_value_x_stats)
}) %>% do.call(rbind,.)
})
unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
print(summary_stat_colname)
print(upper_confint_colname)
print(lower_confint_colname)
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,independent.var=independent.var,independent.var.value=x,independent_value_x_stats)
}) %>% do.call(rbind,.)
})
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
print(summary_stat_colname)
print(upper_confint_colname)
print(lower_confint_colname)
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,independent.var=independent.var,independent.var.value=x,independent_value_x_stats)
}) %>% do.call(rbind,.)
summary_with_confints
empty_result()
empty_result(input.parameters = NA)
empty_result(input.parameters = NA,message="bla")
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
print(summary_stat_colname)
print(upper_confint_colname)
print(lower_confint_colname)
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,
independent.var=independent.var,
dependent.var.value=independent_value_x_stats[,"dependent.var.value"],
independent.var.value=x,
numbers=independent_value_x_stats[,"numbers"],
se=NA,
min=independent_value_x_stats[,"min"],
max= independent_value_x_stats[,"max"])
}) %>% do.call(rbind,.)
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
empty_result
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
undebug(percent_with_confints)
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
undebug(percent_with_confints)
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
independent.var<- "marital_status"
dependent.var <- "start"
hypothesis.type <- "direct_reporting"
case <- "CASE_direct_reporting_categorical_categorical"
options(survey.lonely.psu = "average")
input.parameters= list(
dependent.var=dependent.var,
independent.var=independent.var,
hypothesis.type=hypothesis.type,
sampling.strategy.stratified=sampling.strategy.stratified,
case=case
)
sampling.strategy.stratified=FALSE
options(survey.lonely.psu = "average")
input.parameters= list(
dependent.var=dependent.var,
independent.var=independent.var,
hypothesis.type=hypothesis.type,
sampling.strategy.stratified=sampling.strategy.stratified,
case=case
)
independent.var<- "marital_status"
dependent.var <- "start"
hypothesis.type <- "direct_reporting"
case <- "CASE_direct_reporting_categorical_categorical"
data<-data<-sanitise_data(data,dependent.var,independent.var,case)$data
data
input.parameters= list(
dependent.var=dependent.var,
independent.var=independent.var,
hypothesis.type=hypothesis.type,
sampling.strategy.stratified=sampling.strategy.stratified,
case=case
)
# sanitise input
if(!is.null(do.for.each.unique.value.in.var)){stop("do.for.each.unique.value.in.var must be NULL (not yet implemented)")}
if(sampling.strategy.cluster){stop("cluster must be FALSE (not yet implemented)")}
# map from input to analysis case:
if(is.null(case)){
case <- map_to_case(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL)
}else{
if(!is_valid_case_string(case)){
stop(paste(case,"is not a valid case string. List of valid cases:\n",paste(list_all_cases(T),collapse = "\n"),"value for argument 'case' is not a valid case string. It must be of the form CASE_[hypothesis_type]_[dependent.variable.type]_[independent.variable.type]\nfor example 'CASE_group_difference_categorical_categorical'\nAlternatively, you can leave out that parameter, and we will try to identify the case automagically from the questionnaire"))
}
}
data_sanitised<-sanitise_data(data,
dependent.var,
independent.var,
case)
if(data_sanitised$success){
data<-data_sanitised$data
}else{
return(
empty_result(input.parameters,data_sanitised$message)
)
}
design <- map_to_design(data = data, cluster.var = NULL)
summarise.result<- map_to_summary_statistic(case)
test.hypothesis <- map_to_hypothesis_test(case)
visualisation <- map_to_visualisation(case)
debug(percent_with_confints)
independent.var<- "marital_status"
dependent.var <- "start"
hypothesis.type <- "direct_reporting"
case <- "CASE_direct_reporting_categorical_categorical"
data<-data<-sanitise_data(data,dependent.var,independent.var,case)$data
options(survey.lonely.psu = "average")
input.parameters= list(
dependent.var=dependent.var,
independent.var=independent.var,
hypothesis.type=hypothesis.type,
sampling.strategy.stratified=sampling.strategy.stratified,
case=case
)
# sanitise input
if(!is.null(do.for.each.unique.value.in.var)){stop("do.for.each.unique.value.in.var must be NULL (not yet implemented)")}
if(sampling.strategy.cluster){stop("cluster must be FALSE (not yet implemented)")}
# map from input to analysis case:
if(is.null(case)){
case <- map_to_case(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL)
}else{
if(!is_valid_case_string(case)){
stop(paste(case,"is not a valid case string. List of valid cases:\n",paste(list_all_cases(T),collapse = "\n"),"value for argument 'case' is not a valid case string. It must be of the form CASE_[hypothesis_type]_[dependent.variable.type]_[independent.variable.type]\nfor example 'CASE_group_difference_categorical_categorical'\nAlternatively, you can leave out that parameter, and we will try to identify the case automagically from the questionnaire"))
}
}
data_sanitised<-sanitise_data(data,
dependent.var,
independent.var,
case)
if(data_sanitised$success){
data<-data_sanitised$data
}else{
return(
empty_result(input.parameters,data_sanitised$message)
)
}
design <- map_to_design(data = data, cluster.var = NULL)
summarise.result<- map_to_summary_statistic(case)
test.hypothesis <- map_to_hypothesis_test(case)
visualisation <- map_to_visualisation(case)
# apply the summary statistic, hypothesis test to the given data and survey design:
summary.result  <- summarise.result(dependent.var,independent.var, design)
sink()
result <- svyby(formula(formula_string), formula(by), design, svymean, na.rm = T, keep.var = T,vartype = "ci")
result
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,
independent.var=independent.var,
dependent.var.value=independent_value_x_stats[,"dependent.var.value"],
independent.var.value=x,
numbers=independent_value_x_stats[,"numbers"],
se=NA,
min=independent_value_x_stats[,"min"],
max= independent_value_x_stats[,"max"])
}) %>% do.call(rbind,.)
unique.independent.var.values<- design$variables[[independent.var]] %>% unique
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
independent_value_x_stats<-confints[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,
independent.var=independent.var,
dependent.var.value=independent_value_x_stats[,"dependent.var.value"],
independent.var.value=x,
numbers=independent_value_x_stats[,"numbers"],
se=NA,
min=independent_value_x_stats[,"min"],
max= independent_value_x_stats[,"max"])
}) %>% do.call(rbind,.)
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
percent_with_confints <- function(dependent.var,
independent.var,
design,
na.rm = TRUE){
# if dependent and independent variables have only one value, just return that:
if(length(unique(data[[dependent.var]]))==1){
dependent.var.value=unique(data[[dependent.var]])
if(length(unique(data[[independent.var]]==1))){
independent.var.value=unique(data[[independent.var]])
return(data.frame(dependent.var,independent.var,dependent.var.value,independent.var.value,numbers=1,se=NA,min=NA,max=NA))
}
}
formula_summary<-paste0("~",independent.var, "+",dependent.var )
f.table <- svytable(formula(formula_summary), design)
p.table <- apply(f.table,1,function(x){x/sum(x)})
table(design$variables[[dependent.var]],design$variables[[independent.var]])
formula_string <- paste0("~",independent.var,sep = "")
by <- paste0("~", dependent.var, sep = "")
result_hg_format<-tryCatch(
{
result_svy_format <- svyby(formula(formula_string), formula(by), design, svymean, na.rm = T, keep.var = T,vartype = "ci")
unique.independent.var.values<- design$variables[[independent.var]] %>% unique
summary_with_confints<-unique.independent.var.values %>%
lapply(function(x){
summary_stat_colname<-paste0(independent.var,x)
lower_confint_colname<-paste0("ci_l.",summary_stat_colname)
upper_confint_colname<-paste0("ci_u.",summary_stat_colname)
independent_value_x_stats<-result_svy_format[,c(dependent.var,summary_stat_colname,lower_confint_colname,upper_confint_colname)]
colnames(independent_value_x_stats)<-c("dependent.var.value","numbers","min","max")
data.frame(dependent.var=dependent.var,
independent.var=independent.var,
dependent.var.value=independent_value_x_stats[,"dependent.var.value"],
independent.var.value=x,
numbers=independent_value_x_stats[,"numbers"],
se=NA,
min=independent_value_x_stats[,"min"],
max= independent_value_x_stats[,"max"])
}) %>% do.call(rbind,.)
result[,"min"] %>% replace(summary_with_confints[,"min"] < 0 , 0)
result[,"max"] %>% replace(summary_with_confints[,"min"] > 1 , 1)
result
},
error=function(cond){
sink("./internal/issues_log.txt")
cat("\nconfints failed:\n")
cat(paste("dependent.var:",dependent.var,"\nindependent.var:",independent.var))
cat("\n")
print(cond)
sink()
return(empty_result(list(),message = "FAILED CONFINTS/SUMMARY STAT IN percent_with_confints"))
}
)
result_hg_format
}
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
source('C:/Users/Visitor/msna18/./internal/R/hypegrammaR/summary_statistics.R')
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
source('C:/Users/Visitor/msna18/internal/R/hypegrammaR/analyse_indicator.R')
# click the "Run" button above or
# highlight the next line and press ctrl+ENTER
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/hype.R")
