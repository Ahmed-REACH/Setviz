missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_weighted_counts<-load_composite_indicator_definition_weighted_count()
data<-add_variable_indicators_weighted_count(data,composite_indicators_weighted_counts)
data<-add_variable_indicators_weighted_count(data,composite_indicators_weighted_counts)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
debug(composite_indicator_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
indicator_definition_by_variable
load_composite_indicator_definition_weighted_count
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
composite_indicators_definitions_weighted_counts
debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
composite_indicator_definitions
list.of.new.indicator.definitions
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
#load dependencies
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
debug(composite_indicator_weighted_count)
debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
composite_indicator_definitions %>%
split.data.frame(as.factor(composite_indicator_definitions$new.var.name))
as.factor(composite_indicator_definitions$new.var.name)
composite_indicator_definitions %>%
split.data.frame(as.factor(as.character(composite_indicator_definitions$new.var.name)))
typeof(composite_indicator_definitions$new.var.name)
as.factor(composite_indicator_definitions$new.var.name)
as.factor(composite_indicator_definitions$new.var.name) %>% as.numeric
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
#load dependencies
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
debug(composite_indicator_weighted_count)
debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
undebug(composite_indicator_weighted_count)
undebug(add_variable_indicators_weighted_count)
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
debug(composite_indicator_weighted_count)
debug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
condition
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
condition
value
x
to
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
condition
condition
undebug(composite_indicator_weighted_count)
undebug(recode_generic)
undebug(composite_indicator_weighted_count)
undebug(recode_generic)
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F,as.is = T)
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
reachR:::to_alphanumeric_lowercase
to_alphanumeric_lowercase <- function(x){tolower(gsub("[^a-zA-Z0-9]", "\\.", x))}
to_alphanumeric_lowercase
to_alphanumeric_lowercase_df <- function(df){
names(df) <- to_alphanumeric_lowercase(names(df))
}
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
add_variable_indicators_weighted_count<-function(data,composite_indicator_definitions){
if(!("new.var.name" %in% names(composite_indicator_definitions))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(composite_indicator_definitions))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(composite_indicator_definitions))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(composite_indicator_definitions))){stop("indicator definition must have a column called 'weight'")}
list.of.new.indicator.definitions <- composite_indicator_definitions %>%
# split definitions by new indicators to create. specify levels to insure order stays consistent
split.data.frame(factor(composite_indicator_definitions$new.var.name,levels=unique(composite_indicator_definitions$new.var.name)))
# this has to be a loop, because composite indicators may depend on previous composite indicators.
for(i in seq_along(list.of.new.indicator.definitions)){
data[[unique(list.of.new.indicator.definitions[[i]]$new.var.name)[1]]] <- composite_indicator_weighted_count(data,indicator_definition = list.of.new.indicator.definitions[[i]])
print("vulnerability_index" %in% names(data))
}
return(data)
}
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
# if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
indicator_definition_by_variable <- indicator_definition %>% split.data.frame(indicator_definition$var)
lapply(indicator_definition_by_variable, function(this_var_recoding_definition){
var.to.recode<-as.character(unique(x$var))
# return the weights corresponding to each value
print(this_var_recoding_definition)
x_recoded <- rep(NA,length(data[,var.to.recode]))
for(i in 1:nrow(this_var_recoding_definition)){
x <- this_var_recoding_definition[i,,drop = F]
recoded_generic <- recode_generic(data[,x$var], x$value, x$condition, x$weight)
x_recoded[!is.na(recoded_generic)] <- recoded_generic[!is.na(recoded_generic)]
}
return(x_recoded)})
x_recoded %>% as.data.frame %>% sapply(ass.numeric) %>% rowSums %>% return
}
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
to_alphanumeric_lowercase <- function(x){tolower(gsub("[^a-zA-Z0-9]", "\\.", x))}
# clear/create folders
unlink("./output/modified_data/",recursive=TRUE)
unlink("./output/percent_aggregations_raw_csv",recursive=TRUE)
unlink("./output/barcharts",recursive=TRUE)
dir.create("./output",showWarnings = F)
dir.create("./output/modified_data",showWarnings = F)
dir.create("./output/percent_aggregations_raw_csv",showWarnings = F)
dir.create("./output/mean_aggregations_raw_csv",showWarnings = F)
dir.create("./output/barcharts",showWarnings = F)
#load dependencies
source("./internal/R/dependencies.R")
# setwd("../")
getwd()
setwd("../")
getwd()
#load dependencies
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
names(data) <- to_alphanumeric_lowercase(names(data))
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
load_composite_indicator_definition_weighted_count
composite_indicators_definitions_weighted_counts
load_composite_indicator_definition_weighted_count<-function(file="./internal/input_files/composite_indicators.csv"){
read.csv.part(file = file,2,2,6) %>% remove.empty.rows %>% lapply(to_alphanumeric_lowercase)
}
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
load_composite_indicator_definition_weighted_count<-function(file="./internal/input_files/composite_indicators.csv"){
read.csv.part(file = file,2,2,6) %>% remove.empty.rows %>% lapply(to_alphanumeric_lowercase) %>% do.call(cbind,.)
}
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
composite_indicators_definitions_weighted_counts
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
names(data) <- to_alphanumeric_lowercase(names(data))
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
data %>% map_to_file("./output/modified_data/data_with_composite_indicators.csv")
data_parameters
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
add_variable_indicators_weighted_count
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
load_composite_indicator_definition_weighted_count
load_composite_indicator_definition_weighted_count<-function(file="./internal/input_files/composite_indicators.csv"){
read.csv.part(file = file,2,2,6) %>% remove.empty.rows %>% lapply(to_alphanumeric_lowercase) %>% do.call(cbind,.) %>% as.data.frame
}
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
View(source_loading_log)
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
# undebug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
indicator_definition
list.of.new.indicator.definitions <- composite_indicator_definitions %>%
# split definitions by new indicators to create. specify levels to insure order stays consistent
split.data.frame(factor(composite_indicator_definitions$new.var.name,levels=unique(composite_indicator_definitions$new.var.name)))
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
undebug(add_variable_indicators_weighted_count)
# undebug(composite_indicator_weighted_count)
# undebug(recode_generic)
debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
if(!("value" %in% names(composite_indicator_definitions))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(composite_indicator_definitions))){stop("indicator definition must have a column called 'weight'")}
list.of.new.indicator.definitions <- composite_indicator_definitions %>%
# split definitions by new indicators to create. specify levels to insure order stays consistent
split.data.frame(factor(composite_indicator_definitions$new.var.name,levels=unique(composite_indicator_definitions$new.var.name)))
# this has to be a loop, because composite indicators may depend on previous composite indicators.
for(i in seq_along(list.of.new.indicator.definitions)){
data[[unique(list.of.new.indicator.definitions[[i]]$new.var.name)[1]]] <- composite_indicator_weighted_count(data,indicator_definition = list.of.new.indicator.definitions[[i]])
print("vulnerability_index" %in% names(data))
}
return(data)
debug(composite_indicator_weighted_count)
# undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
# if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
indicator_definition_by_variable <- indicator_definition %>% split.data.frame(indicator_definition$var)
lapply(indicator_definition_by_variable, function(this_var_recoding_definition){
var.to.recode<-as.character(unique(this_var_recoding_definition$var))
# return the weights corresponding to each value
print(this_var_recoding_definition)
x_recoded <- rep(NA,length(data[,var.to.recode]))
for(i in 1:nrow(this_var_recoding_definition)){
x <- this_var_recoding_definition[i,,drop = F]
recoded_generic <- recode_generic(data[,x$var], x$value, x$condition, x$weight)
x_recoded[!is.na(recoded_generic)] <- recoded_generic[!is.na(recoded_generic)]
}
return(x_recoded)})
x_recoded %>% as.data.frame %>% sapply(ass.numeric) %>% rowSums %>% return
}
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# clear/create folders
unlink("./output/modified_data/",recursive=TRUE)
unlink("./output/percent_aggregations_raw_csv",recursive=TRUE)
unlink("./output/barcharts",recursive=TRUE)
dir.create("./output",showWarnings = F)
dir.create("./output/modified_data",showWarnings = F)
dir.create("./output/percent_aggregations_raw_csv",showWarnings = F)
dir.create("./output/mean_aggregations_raw_csv",showWarnings = F)
dir.create("./output/barcharts",showWarnings = F)
#load dependencies
source("./internal/R/dependencies.R")
setwd("../")
getwd()
#load dependencies
source("./internal/R/dependencies.R")
to_alphanumeric_lowercase <- function(x){tolower(gsub("[^a-zA-Z0-9]", "\\.", x))}
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
names(data) <- to_alphanumeric_lowercase(names(data))
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
# undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
# undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
debug(composite_indicator_weighted_count)
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
# split indicator definition by source variable:
indicator_definition_by_variable <- indicator_definition %>% split.data.frame(indicator_definition$var)
lapply(indicator_definition_by_variable, function(this_var_recoding_definition){
var.to.recode<-as.character(unique(this_var_recoding_definition$var))
# return the weights corresponding to each value
print(this_var_recoding_definition)
}
)
pri tn(var.to.recode)
# split indicator definition by source variable:
indicator_definition_by_variable <- indicator_definition %>% split.data.frame(indicator_definition$var)
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
### input x should be the line in the data with variable name,
recode_generic <- function(x, value, condition, to){
recoded <- rep(NA,length(x))
if(condition == "SMALLER OR EQUAL"){
recoded <- recode_smaller_equal(x = x, from = value, to = to)
}
if(condition == "EQUAL")
{
recoded <- recode_equal(x = x, from = value, to = to)
}
if(condition == "LARGER"){
recoded <- recode_larger(x = x, from = value, to = to)
}
return(recoded)
}
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../")
getwd()
# clear/create folders
unlink("./output/modified_data/",recursive=TRUE)
unlink("./output/percent_aggregations_raw_csv",recursive=TRUE)
unlink("./output/barcharts",recursive=TRUE)
dir.create("./output",showWarnings = F)
dir.create("./output/modified_data",showWarnings = F)
dir.create("./output/percent_aggregations_raw_csv",showWarnings = F)
dir.create("./output/mean_aggregations_raw_csv",showWarnings = F)
dir.create("./output/barcharts",showWarnings = F)
#load dependencies
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
names(data) <- to_alphanumeric_lowercase(names(data))
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
composite_indicators_definitions_weighted_counts
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source('~/GitHub/msna18/./internal/R/composite_indicator_weighted_count.R')
source("./internal/R/dependencies.R")
# LOAD INPUT
# data
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
names(data) <- to_alphanumeric_lowercase(names(data))
missing_data_to_NA<-function(data){
lapply(data,function(x){
replace(x,which(x %in% c("","N/A","#N/A","NA")),NA)
}) %>% as.data.frame(stringsAsFactors=T)# survey needs with factors.
}
# data parameters
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
composite_indicators_definitions_weighted_counts<-load_composite_indicator_definition_weighted_count()
#undebug(recode_generic)
#debug(add_variable_indicators_weighted_count)
data<-add_variable_indicators_weighted_count(data,composite_indicators_definitions_weighted_counts)
names(data)
data$vul.pin
data$vulnerability.index
