setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
getwd()
source("./internal/R/dependencies.R")
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/survey_design.R")
source("./internal/R/composite_indicator_weighted_count.R")
source("./internal/R/recoding.R")
source("./internal/R/KI_aggregation.R")
source("./internal/R/aggregation.R")
source("./internal/R/errors.R")
source("./internal/R/summary_statistics.R")
source("./internal/R/load_questionnaire.R")
# load data
data<-read.csv("./internal/input_files/data.csv")
# load data metadata
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
# load samplingframe (only if data_parameters says it's a stratified sample)
if(data_parameters$stratified=="yes"){sf<-load_samplingframe("./internal/input_files/sampling_frame.csv",
data.stratum.column = data_parameters$stratum.name.variable,return.stratum.populations = F
)}
questionnaire<-load_questionnaire(data,questions.file = "./internal/input_files/kobo_questions.csv",
choices.file = "./internal/input_files/kobo_choices.csv",
choices.label.column.to.use = data_parameters$choices.label.column.to.use)
foo1 <- function(data, questionnaire){
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
return(s_mul, s_mul_names)
}
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
groups <- grep("begin_group", questionnaire[["questions"]]$type, ignore.case = T)
questionnaire[["questions"]]$type
questionnaire[["questions"]]$type %>% table
#####
multiples <- data.frame(s_mul, s_mul_names)
multiples_indices_in_data <- which(reachR:::to_alphanumeric_lowercase(names(data)) %in% s_mul_names)
questions_names_in_data <- reachR:::to_alphanumeric_lowercase(names(data))
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- sum(questionnaire[["choices"]]$list.name == y)
index_multiple_answers_data[[x]] <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
}
}
return(index_multiple_answers_data)
}
dependents(s_mul, s_mul_names, data = data)
debug(dependents)
dependents(s_mul, s_mul_names, data = data)
questions_names_in_data
(y %in% questions_names_in_data)
questionnaire[["choices"]]$list.name == y
select_if(questionnaire[["choices"]], starts_with(y), list.name)
select(questionnaire[["choices"]], starts_with(y), list.name)
select(questionnaire[["choices"]], starts_with("abc"), list.name)
select(questionnaire[["choices"]], starts_with("abc"), list.name)
select(questionnaire[["choices"]],  list.name, starts_with("abc"))
select(questionnaire[["choices"]],  list.name, starts_with("abc"))
select(questionnaire[["choices"]], list.name, starts_with("abc"))
select(questionnaire[["choices"]], starts_with("abc"))
select(questionnaire[["choices"]], starts_with(y))
y <- "biggest.needs"
select(questionnaire[["choices"]], starts_with(y))
y <- "biggest_needs"
select(questionnaire[["choices"]], starts_with(y))
questionnaire[["choices"]]
questionnaire[["choices"]]$list.name
questionnaire[["choices"]]$list.name %>% table
select(questionnaire[["choices"]], starts_with("biggest_needs"))
y <- "biggest_needs"
filter(questionnaire[["choices"]], list.name %in% y)
questionnaire[["choices"]]$list.name <- gsub(".list", questionnaire[["choices"]]$list.name, "", trim = T, order.pattern = T)
questionnaire[["choices"]]$list.name <- gsub(".list", questionnaire[["choices"]]$list.name, "")
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
questionnaire<-load_questionnaire(data,questions.file = "./internal/input_files/kobo_questions.csv",
choices.file = "./internal/input_files/kobo_choices.csv",
choices.label.column.to.use = data_parameters$choices.label.column.to.use)
questionnaire[["choices"]]$list.name <- reachR:::to_alphanumeric_lowercase(questionnaire[["choices"]]$list.name)
questionnaire[["choices"]]$list.name <- reachR:::to_alphanumeric_lowercase(questionnaire[["choices"]]$list.name)
questionnaire[["choices"]]$list.name <- gsub(".list", "", questionnaire[["choices"]]$list.name)
questionnaire[["choices"]]$list.name
questionnaire[["choices"]]$list.name %>% table
filter(questionnaire[["choices"]], list.name %in% y)
y <- "biggest.needs"
filter(questionnaire[["choices"]], list.name %in% y)
length(filter(questionnaire[["choices"]], list.name %in% y))
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data[[x]] <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
}
}
return(index_multiple_answers_data)
}
undebug(dependents)
dependents(s_mul, s_mul_names, data = data)
debug(dependents)
dependents(s_mul, s_mul_names, data = data)
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
questions_names_in_data == y
(which(questions_names_in_data == y)
)
as.numeric(which(questions_names_in_data == y)+1
)
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data[[x]]
index_multiple_answers_data[[x]] <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
undebug(dependents)
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- c(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
dependents(s_mul, s_mul_names, data = data)
rm(y)
debug(dependents)
dependents(s_mul, s_mul_names, data = data)
function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- c(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
dependents(s_mul, s_mul_names, data = data)
function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- c(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
dependents(s_mul, s_mul_names, data = data)
function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- c(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
undebug(dependents)
undebug(dependents)
debug(dependents)
dependents(s_mul, s_mul_names, data = data)
function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- c(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- list(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
index_multiple_answers_data <- list(index_multiple_answers_data,
c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number)))
}
}
return(index_multiple_answers_data)
}
dependents(s_mul, s_mul_names, data = data)
s_mul
hi <- dependents(s_mul, s_mul_names, data = data)
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data <- list(index_multiple_answers_data, q.num)
}
}
return(index_multiple_answers_data)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
getwd()
source("./internal/R/dependencies.R")
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/composite_indicator_weighted_count.R")
source("./internal/R/recoding.R")
source("./internal/R/survey_design.R")
source("./internal/R/aggregation.R")
source("./internal/R/KI_aggregation.R")
source("./internal/R/errors.R")
source("./internal/R/summary_statistics.R")
source("./internal/R/load_questionnaire.R")
# load data
data<-read.csv("./internal/input_files/data.csv")
# load data metadata
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
# load samplingframe (only if data_parameters says it's a stratified sample)
if(data_parameters$stratified=="yes"){sf<-load_samplingframe("./internal/input_files/sampling_frame.csv",
data.stratum.column = data_parameters$stratum.name.variable,return.stratum.populations = F
)}
questionnaire<-load_questionnaire(data,questions.file = "./internal/input_files/kobo_questions.csv",
choices.file = "./internal/input_files/kobo_choices.csv",
choices.label.column.to.use = data_parameters$choices.label.column.to.use)
names(data)
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
groups <- grep("begin_group", questionnaire[["questions"]]$type, ignore.case = T)
group_names <- questionnaire[["questions"]]$name[groups]
s_mul_names <- qdap::mgsub(group_names, "", questions.names, trim = T, order.pattern = T)
### cleaning the questionnaire choices
questionnaire[["choices"]]$list.name <- reachR:::to_alphanumeric_lowercase(questionnaire[["choices"]]$list.name)
questionnaire[["choices"]]$list.name <- gsub(".list", "", questionnaire[["choices"]]$list.name)
questionnaire[["choices"]]$list.name
#####
multiples <- data.frame(s_mul, s_mul_names)
multiples_indices_in_data <- which(reachR:::to_alphanumeric_lowercase(names(data)) %in% s_mul_names)
questions_names_in_data <- reachR:::to_alphanumeric_lowercase(names(data))
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data <- list(index_multiple_answers_data, q.num)
}
}
return(index_multiple_answers_data)
}
hi <- dependents(s_mul, s_mul_names, data = data)
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data <- list(index_multiple_answers_data, list(q.num))
}
}
return(index_multiple_answers_data)
}
hi <- dependents(s_mul, s_mul_names, data = data)
View(hi)
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data[x] <- q.num
}
}
return(index_multiple_answers_data)
}
hi <- dependents(s_mul, s_mul_names, data = data)
warnings()
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data[[x]] <- q.num
}
}
return(index_multiple_answers_data)
}
hi <- dependents(s_mul, s_mul_names, data = data)
debug(dependents)
hi <- dependents(s_mul, s_mul_names, data = data)
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data[[y]] <- q.num
}
}
return(index_multiple_answers_data)
}
#Getting associated choices columns in the data
dependents <- function(s_mul, s_mul_names, data){
index_multiple_answers_data <- list()
for(x in s_mul){
y <- s_mul_names[(s_mul == x)]
if(y %in% questions_names_in_data){
number <- length(filter(questionnaire[["choices"]], list.name %in% y))
q.num <- c(as.numeric(which(questions_names_in_data == y)+1):as.numeric(which(questions_names_in_data == y)+number))
index_multiple_answers_data[[y]] <- q.num
}
}
return(index_multiple_answers_data)
}
hi <- dependents(s_mul, s_mul_names, data = data)
multiples_in_questionnaire <- function(data, questionnaire){
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
return(list(c(s_mul, s_mul_names)))
}
s_mul_names
choices_for_select_multiple <- function(question_name, data){
index_multiple_answers_data <- c()
if(question_name %in% names(data)){
number <- length(filter(questionnaire[["choices"]], list.name %in% question_name))
q.num <- c(as.numeric(which(names(data) == question_name)+1):as.numeric(which(names(data) == question_name)+number))
index_multiple_answers_data <- q.num
}
return(index_multiple_answers_data)
}
choices_for_select_multiple("biggest.needs", data = data)
debug(choices_for_select_multiple)
choices_for_select_multiple("biggest.needs", data = data)
names(data)<- reachR:::to_alphanumeric_lowercase(names(data))
choices_for_select_multiple("biggest.needs", data = data)
filter(questionnaire[["choices"]]
filter(questionnaire[["choices"]], list.name %in% question_name)
length(filter(questionnaire[["choices"]], list.name %in% question_name))
choices_for_select_multiple <- function(question_name, data){
index_multiple_answers_data <- c()
if(question_name %in% names(data)){
number <- nrows(filter(questionnaire[["choices"]], list.name %in% question_name))
q.num <- c(as.numeric(which(names(data) == question_name)+1):as.numeric(which(names(data) == question_name)+number))
index_multiple_answers_data <- q.num
}
return(index_multiple_answers_data)
}
undebug(choices_for_select_multiple)
choices_for_select_multiple("biggest.needs", data = data)
choices_for_select_multiple <- function(question_name, data){
index_multiple_answers_data <- c()
if(question_name %in% names(data)){
number <- nrow(filter(questionnaire[["choices"]], list.name %in% question_name))
q.num <- c(as.numeric(which(names(data) == question_name)+1):as.numeric(which(names(data) == question_name)+number))
index_multiple_answers_data <- q.num
}
return(index_multiple_answers_data)
}
choices_for_select_multiple("biggest.needs", data = data)
reachR:::load_questionnaire
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
getwd()
rm(list = ls())
source("./internal/R/dependencies.R")
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/composite_indicator_weighted_count.R")
source("./internal/R/survey_design.R")
source("./internal/R/recoding.R")
source("./internal/R/aggregation.R")
source("./internal/R/KI_aggregation.R")
source("./internal/R/errors.R")
source("./internal/R/summary_statistics.R")
source("./internal/R/load_questionnaire.R")
# load data
data<-read.csv("./internal/input_files/data.csv")
# load data metadata
data_parameters<-read.csv("./internal/input_files/data_parameters.csv",stringsAsFactors = F)
# load samplingframe (only if data_parameters says it's a stratified sample)
if(data_parameters$stratified=="yes"){sf<-load_samplingframe("./internal/input_files/sampling_frame.csv",
data.stratum.column = data_parameters$stratum.name.variable,return.stratum.populations = F
)}
questionnaire<-load_questionnaire(data,questions.file = "./internal/input_files/kobo_questions.csv",
choices.file = "./internal/input_files/kobo_choices.csv",
choices.label.column.to.use = data_parameters$choices.label.column.to.use)
multiples_in_questionnaire <- function(data, questionnaire){
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
return(list(c(s_mul, s_mul_names)))
}
multiples <- multiples_in_questionnaire(data, questionnaire)
multiples_in_questionnaire <- function(data, questionnaire){
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
return(c(s_mul, s_mul_names))
}
multiples <- multiples_in_questionnaire(data, questionnaire)
multiples_in_questionnaire <- function(data, questionnaire){
s_mul <- lapply(questionnaire$questions$name, question_is_select_multiple) %>% unlist %>% which
s_mul_names <- questionnaire$questions$name[s_mul]
return(list(s_mul, s_mul_names))
}
multiples <- multiples_in_questionnaire(data, questionnaire)
source('~/GitHub/msna18/internal/R/select_multiplify.R')
