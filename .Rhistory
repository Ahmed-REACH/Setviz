vars_recode
indicator_definition
x<-sample(letters[1:3],10,T)
x
x_recoded<-numeric(length(x))
x_recoded
x_recoded<-numeric(length(x))[]<-NA
x_recoded[]<-NA
x_recoded
?replace
recode_to_numeric<-function(x,values,weights){
x_recoded<-numeric(length(x))
x_recoded[]<-NA
apply(seq_along(values),function(i){
x_recoded[x==values[i]]<-weight[i]
})
}
recode_to_numeric(x,"a",1)
recode_to_numeric(x,c("a","b"),c(0,1))
x
weights<-c(0,1)
match(x,weights)
x
weights
values<-c("a","b")
match(x,values)
x
weights[match(x,values)]
recode_to_numeric<-function(x,from,to){
return(to[match(x,from)])
}
recode_to_numeric(x,c("a","b"),c(0,1))
recode<-function(x,from,to){
return(to[match(x,from)])
}
recode<-function(x,from,to){
return(to[match(x,from)])
}
indicator_definition %>% split.data.frame(indicator_definition$var)
indicator_definition %>% split.data.frame(indicator_definition$var)[[1]]
indicator_definition %>% split.data.frame(indicator_definition$var)
indicator_definition %>% split.data.frame(indicator_definition$var)
(indicator_definition %>% split.data.frame(indicator_definition$var))[[1]]
x<-(indicator_definition %>% split.data.frame(indicator_definition$var))[[1]]
x$var
unique(x$var)
data[,unique(x$var)]
data_numeric<-lapply(data,function(x){as.numeric(as.character(x))})
data_numeric[,unique(x$var)]
data_numeric
unique(x$var)
data_numeric[,as.character((unique(x$var))]
data_numeric[,as.character((unique(x$var)))]
data_numeric %>% as.data.frame %>% .[,as.character((unique(x$var)))]
data_numeric<-lapply(data,function(x){as.numeric(as.character(x))}) %>% as.data.frame
data_numeric %>% .[,as.character((unique(x$var)))]
data_numeric[,as.character((unique(x$var)))] %>% recode(x$value,x$weight)
data[,as.character((unique(x$var)))] %>% recode(x$value,x$weight)
data[,as.character((unique(x$var)))]
x$
x$value
x$weight
x$value
data[,as.character((unique(x$var)))] %>% recode(x$value,x$weight)
data_numeric[,x$var]<-data[,as.character((unique(x$var)))] %>% recode(x$value,x$weight)
data_numeric[,x$var]
x$var
data_numeric[,as.character(x$var)]<-data[,as.character((unique(x$var)))] %>% recode(x$value,x$weight)
data_numeric[,as.character(unique(x$var))]<-data[,as.character((unique(x$var)))] %>% recode(x$value,x$weight)
data_numeric
indicator_definition %>% split.data.frame(indicator_definition$var) %>%
lapply(1,function(x){
data_numeric[,var.to.recode]<-data[,var.to.recode] %>% recode(x$value,x$weight)
})
indicator_definition %>% split.data.frame(indicator_definition$var) %>%
lapply(function(x){
data_numeric[,var.to.recode]<-data[,var.to.recode] %>% recode(x$value,x$weight)
})
indicator_definition %>% split.data.frame(indicator_definition$var) %>%
lapply(function(x){
var.to.recode<-as.character(unique(x$var))
data_numeric[,var.to.recode]<-data[,var.to.recode] %>% recode(x$value,x$weight)
})
indicator_definition %>% split.data.frame(indicator_definition$var) %>%
lapply(function(x){
var.to.recode<-as.character(unique(x$var))
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
data_numeric<-lapply(data,function(x){as.numeric(as.character(x))}) %>% as.data.frame
indicator_definition %>% split.data.frame(indicator_definition$var) %>%
lapply(function(x){
var.to.recode<-as.character(unique(x$var))
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
indicator_definition %>% split.data.frame(indicator_definition$var) %>%
# for each source variable...
recoded<-lapply(function(x){
# get the name of the variable to recode
var.to.recode<-as.character(unique(x$var))
# return the weights corresponding to each value
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
recoded %>% as.data.frame %>% rowSums %>% return
}
recode<-function(x,from,to){
return(to[match(x,from)])
}
composite_indicator_weighted_count(data,indicator_definition)
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
recoded <- indicator_definition %>% split.data.frame(indicator_definition$var) %>%
# for each source variable...
lapply(function(x){
# get the name of the variable to recode
var.to.recode<-as.character(unique(x$var))
# return the weights corresponding to each value
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
# then take the rowsums
recoded %>% as.data.frame %>% rowSums %>% return
}
composite_indicator_weighted_count(data,indicator_definition)
indicator_definition
data$idp.ref
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee","returnee"),c(10,100)))
indicator_definition
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee","returnee"),c(10,100)))
indicator_definition
indicator_definition<-data.frame(new.var.name="call.success",var=rep("call.status",3),value=c("off","wrong_number","answered"),weight=c(0,1,2),stringsAsFactors = F)
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee","returnee"),c(10,100)))
indicator_definition
c("call.success","idp.ref",c("refugee","returnee"),c(10,100))
indicator_definition<-data.frame(new.var.name="call.success",var=rep("call.status",3),value=c("off","wrong_number","answered"),weight=c(0,1,2),stringsAsFactors = F)
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee"),c(10)))
indicator_definition
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("returnee"),c(1000)))
indicator_definition
composite_indicator_weighted_count(data,indicator_definition)
debug(composite_indicator_weighted_count)
composite_indicator_weighted_count(data,indicator_definition)
recoded
indicator_definition %>% lapply(typeof)
indicator_definition<-data.frame(new.var.name="call.success",var=rep("call.status",3),value=c("off","wrong_number","answered"),weight=c(0,1,2),stringsAsFactors = F)
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee"),c(10)))
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("returnee"),c(1000)))
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
recoded <- indicator_definition %>% split.data.frame(indicator_definition$var) %>%
# for each source variable...
lapply(function(x){
# get the name of the variable to recode
var.to.recode<-as.character(unique(x$var))
# return the weights corresponding to each value
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
# then take the rowsums
recoded %>% as.data.frame %>% rowSums %>% return
}
recode<-function(x,from,to){
return(to[match(x,from)])
}
debug(composite_indicator_weighted_count)
composite_indicator_weighted_count(data,indicator_definition)
recoded
debug(composite_indicator_weighted_count)
composite_indicator_weighted_count(data,indicator_definition)
indicator_definition<-data.frame(new.var.name="call.success",var=rep("call.status",3),value=c("off","wrong_number","answered"),weight=c(0,1,2),stringsAsFactors = F)
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee"),c(10)))
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("returnee"),c(1000)))
composite_indicator_weighted_count(data,indicator_definition)
indicator_definition %>% lapply(typeof)
indicator_definition<-data.frame(new.var.name="call.success",var=rep("call.status",3),value=c("off","wrong_number","answered"),weight=c(0,1,2),stringsAsFactors = F)
indicator_definition %>% lapply(typeof)
indicator_definition<-data.frame(new.var.name="call.success",
var=    c(rep("call.status",3),"idp.ref","idp.ref"),
value=  c("off","wrong_number","answered","refugee","returnee")
,weight=c(0,1,2,10,20),stringsAsFactors = F)
indicator_definition
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("refugee"),c(10)))
indicator_definition<-rbind(indicator_definition,c("call.success","idp.ref",c("returnee"),c(1000)))
indicator_definition<-data.frame(new.var.name="call.success",
var=    c(rep("call.status",3),"idp.ref","idp.ref"),
value=  c("off","wrong_number","answered","refugee","returnee")
,weight=c(0,1,2,10,20),stringsAsFactors = F)
undebug(composite_indicator_weighted_count)
composite_indicator_weighted_count(data,indicator_definition)
defo.numeric<-function(x){
if(is.factor(x)){return(as.numeric(levels(x))[x])}else{
return(as.numeric(x))
}
}
ass.numeric<-function(x){
if(is.factor(x)){return(as.numeric(levels(x))[x])}else{
return(as.numeric(x))
}
}
ass.numeric<-function(x){
# as.numeric, but without factor mayham
if(is.factor(x)){return(as.numeric(levels(x))[x])}else{
return(as.numeric(x))
}
}
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
recoded <- indicator_definition %>% split.data.frame(indicator_definition$var) %>%
# for each source variable...
lapply(function(x){
# get the name of the variable to recode
var.to.recode<-as.character(unique(x$var))
# return the weights corresponding to each value
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
# then take the rowsums
recoded %>% as.data.frame %>% sapply(ass.numeric) %>% rowSums %>% return
}
composite_indicator_weighted_count<-function(data,indicator_definition){
if(is.null(data)|is.null(indicator_definition)){stop("input can not be null")}
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
if(length(unique(indicator_definition$new.var.name))!=1){stop("trying to make composite indicator with more than one new name for the newly created variable")}
# split indicator definition by source variable:
recoded <- indicator_definition %>% split.data.frame(indicator_definition$var) %>%
# for each source variable...
lapply(function(x){
# get the name of the variable to recode
var.to.recode<-as.character(unique(x$var))
# return the weights corresponding to each value
return(data[,var.to.recode] %>% recode(x$value,x$weight))
})
# then take the rowsums and return them
recoded %>% as.data.frame %>% sapply(ass.numeric) %>% rowSums %>% return
}
recode<-function(x,from,to){
return(to[match(x,from)])
}
undebug(composite_indicator_weighted_count)
indicator_definition<-data.frame(new.var.name="call.success",
var=    c(rep("call.status",3),"idp.ref","idp.ref"),
value=  c("off","wrong_number","answered","refugee","returnee")
,weight=c(0,1,2,10,20),stringsAsFactors = F)
indicator_definition %>% lapply(typeof)
indicator_definition
composite_indicator_weighted_count(data,indicator_definition)
add_variable_indicators_weighted_count<-function(data,composite_indicator_definitions){
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
composite_indicator_definitions %>% split.data.frame(composite_indicator_definitions$new.var.name) %>% lapply(composite_indicator_weighted_count,data=data)
}
add_variable_indicators_weighted_count(indicator_definition)
add_variable_indicators_weighted_count(data,indicator_definition)
composite_indicators<-composite_indicator_definitions %>% split.data.frame(composite_indicator_definitions$new.var.name) %>% lapply(composite_indicator_weighted_count,data=data) %>% as.data.frame
add_variable_indicators_weighted_count<-function(data,composite_indicator_definitions){
if(!("new.var.name" %in% names(indicator_definition))){stop("indicator definition must have a column called 'new.var.name'")}
if(!("var" %in% names(indicator_definition))){stop("indicator definition must have a column called 'var'")}
if(!("value" %in% names(indicator_definition))){stop("indicator definition must have a column called 'value'")}
if(!("weight" %in% names(indicator_definition))){stop("indicator definition must have a column called 'weight'")}
composite_indicators <- composite_indicator_definitions %>%
split.data.frame(composite_indicator_definitions$new.var.name) %>%
sapply(composite_indicator_weighted_count,data=data)
names(composite_indicators)<-unique(composite_indicator_definitions$new.var.name)
return(data.frame(data,composite_indicators,stringsAsFactors = F))
}
add_variable_indicators_weighted_count(data,indicator_definition)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
data<-read.csv("./internal/input_files/data.csv")
composite_indicators_weighted_count<-read.csv("./internal/input_files/composite_indicators.csv")
composite_indicators_weighted_count
read.csv.skip.lines<-function(filename,header.row){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row, header = F)
colnames(df)= headers
}
read.csv.skip.lines("./internal/input_files/composite_indicators.csv",3) %>% head
read.csv.skip.lines<-function(file,header.row){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row, header = F)
colnames(df)= headers
}
read.csv.skip.lines("./internal/input_files/composite_indicators.csv",3) %>% head
read.csv.skip.lines("./internal/input_files/composite_indicators.csv",2) %>% head
read.csv.skip.lines<-function(file,header.row){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row, header = F)
colnames(df)= headers
df
}
read.csv.skip.lines("./internal/input_files/composite_indicators.csv",2) %>% head
read.csv.skip.lines<-function(file,header.row){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row+1, header = F)
colnames(df)= headers
df
}
read.csv.skip.lines("./internal/input_files/composite_indicators.csv",2) %>% head
read.csv.cuttopleft<-function(file,cut.top.rows,cut.left.cols,cut.right.cols){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row+1, header = F)
colnames(df)= headers
df[,(cut.left.cols+1):ncol(df)]
}
read.csv.cuttopleft<-function(file,cut.top.rows,cut.left.cols=0,cut.right.cols=0){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row+1, header = F)
colnames(df)= headers
df[,(cut.left.cols+1):(ncol(df)-cut.right.cols)]
}
read.csv.skip.lines("./internal/input_files/composite_indicators.csv",2,1) %>% head
read.csv.cuttopleft<-function(file,cut.top.rows,cut.left.cols=0,cut.right.cols=0){
headers = read.csv(file, skip = header.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = header.row+1, header = F)
colnames(df)= headers
df[,(cut.left.cols+1):(ncol(df)-cut.right.cols)]
}
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,1) %>% head
read.csv.cuttopleft<-function(file,cut.top.rows,cut.left.cols=0,cut.right.cols=0){
headers = read.csv(file, skip = cut.top.rows, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = cut.top.rows+1, header = F)
colnames(df)= headers
df[,(cut.left.cols+1):(ncol(df)-cut.right.cols)]
}
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,1) %>% head
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,1) %>% head
read.csv.cuttopleft<-function(file,first.row,first.col=1,last.col=NULL){
headers = read.csv(file, skip = cut.top.rows, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = cut.top.rows+1, header = F)
colnames(df)= headers
if(is.null(last.col)){last.col<-ncol(df)}
df[,first.col:last.col]
}
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,1) %>% head
read.csv.cuttopleft<-function(file,first.row,first.col=1,last.col=NULL){
headers = read.csv(file, skip = first.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = first.row+1, header = F)
colnames(df)= headers
if(is.null(last.col)){last.col<-ncol(df)}
df[,first.col:last.col]
}
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,1) %>% head
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,2,5) %>% head
read.csv.cuttopleft<-function(file,first.row,first.col=1,last.col=NULL){
headers = read.csv(file, skip = first.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = first.row+1, header = F,stringsAsFactors = F)
colnames(df)= headers
if(is.null(last.col)){last.col<-ncol(df)}
df[,first.col:last.col]
}
read.csv.cuttopleft(file = "./internal/input_files/composite_indicators.csv",2,2,5) %>% head
rowempty<-apply(df,1,function(x){
all(x %in% c(NA,""))
})
remove.empty.rows<-function(df){
rowempty<-apply(df,1,function(x){
all(x %in% c(NA,""))
})
df[rowempty,]
}
read.csv.part<-function(file,first.row,first.col=1,last.col=NULL){
headers = read.csv(file, skip = first.row, header = F, nrows = 1, as.is = T)
df = read.csv(file, skip = first.row+1, header = F,stringsAsFactors = F)
colnames(df)= headers
if(is.null(last.col)){last.col<-ncol(df)}
df[,first.col:last.col]
}
remove.empty.rows<-function(df){
rowempty<-apply(df,1,function(x){
all(x %in% c(NA,""))
})
df[rowempty,]
}
read.csv.part(file = "./internal/input_files/composite_indicators.csv",2,2,5) %>% head
read.csv.part(file = "./internal/input_files/composite_indicators.csv",2,2,5) %>% remove.empty.rows
remove.empty.rows<-function(df){
rowempty<-apply(df,1,function(x){
!all(x %in% c(NA,""))
})
df[rowempty,]
}
remove.empty.rows<-function(df){
rowempty<-apply(df,1,function(x){
all(x %in% c(NA,""))
})
df[!rowempty,]
}
read.csv.part(file = "./internal/input_files/composite_indicators.csv",2,2,5) %>% remove.empty.rows
load_composite_indicator_definitions()
load_composite_indicator_definitions()
load_composite_indicator_definitions()
load_composite_indicator_definition_weighted_count<-function(file){
read.csv.part(file = file,2,2,5) %>% remove.empty.rows
}
load_composite_indicator_definition_weighted_count<-function(file="./internal/input_files/composite_indicators.csv"){
read.csv.part(file = file,2,2,5) %>% remove.empty.rows
}
load_composite_indicator_definition_weighted_count()
newdata<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
newdata<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
write.csv(data_with_composite_indicators,"./output/modified_data/data_w_weighted_counts.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
data<-read.csv("./internal/input_files/data.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
write.csv(data_with_composite_indicators,"./output/modified_data/data_w_weighted_counts.csv")
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
source("./internal/R/load_analysis_definitions.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
rm(list=ls())
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/load_analysis_definitions.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
source("./internal/R/composite_indicator_weighted_count.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
# clear all objects:
rm(list=ls())
# set working directory to this script's path:
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/composite_indicator_weighted_count.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/composite_indicator_weighted_count.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/composite_indicator_weighted_count.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
write.csv(data_with_composite_indicators,"./output/modified_data/data_w_weighted_counts.csv")
data_with_composite_indicators
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./internal/R/recoding.R")
source("./internal/R/load_analysis_definitions.R")
source("./internal/R/composite_indicator_weighted_count.R")
data<-read.csv("./internal/input_files/data.csv")
ci_weighted_count_def<-load_composite_indicator_definition_weighted_count()
data_with_composite_indicators<-add_variable_indicators_weighted_count(data,ci_weighted_count_def)
write.csv(data_with_composite_indicators,"./output/modified_data/data_w_weighted_counts.csv")
